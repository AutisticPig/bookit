<div id="canvas" class="w-full h-full bg-base-100"></div>

<script>
    // TODO:
    // - Library used is VivaGraphJS which is very old and has some legacy code. So refactor it later
    // - Clean code is not my priority right now. I just want to get it working
    // - Code is very unsafe and not production ready need better error handling

    import Viva from 'vivagraphjs';    
    import { buildCircleNodeShader, WebglCircle } from '../scripts/circle';
    import parseColor from 'vivagraphjs/src/WebGL/parseColor';
    import data from '../data/data.json';

    // child and parent data initialization
    var graph = Viva.Graph.graph();
    Object.keys(data).forEach((key) => {
        graph.addNode(key, "parent");
        data[key].forEach((article) => {
            graph.addNode(article.name, article.url)
            graph.addLink(key, article.name);
        })
    })

    var layout = Viva.Graph.Layout.forceDirected(
        graph, 
        {
            springLength: 50, // Increase the spring length
            springCoeff: 0.0001, // Adjust the spring coefficient
            dragCoeff: 0.02,
            gravity: -1.2
        }
    );

    // webgl context
    var graphics = Viva.Graph.View.webglGraphics();

    // node UI
    var parentColor = 0xd1d5db, childColor = 0x404040;
    var circleNode = buildCircleNodeShader();
    graphics.setNodeProgram(circleNode);
    // can add more properties to the node here
    graphics.node((node) => {
        return node.data == "parent" ? new WebglCircle(20, parentColor) : new WebglCircle(10, childColor);
    });

    // TODO: linkUI with arrow
    // graph.forEachLink((link) => {
    //     console.log(link)
    //     graphics.getLinkUI(link.id).color = parseColor('#404040');
    // });    

    // renderer
    var renderer = Viva.Graph.View.renderer(
        graph, 
        {
            container: document.getElementById('canvas'),
            layout: layout,
            graphics: graphics
        }
    );

    // helper functions for highlighting links
    function highlightRelatedLinks (node, on) {
        graph.getLinks(node.id).forEach(link => {
            graphics.getLinkUI(link.id).color = on ? parseColor('#a991f7') : parseColor('#404040');
        });
    };

    // listening to mouse events {rethink this part}
    var events = Viva.Graph.webglInputEvents(graphics, graph);
    events.mouseEnter((node) => {
        highlightRelatedLinks(node, true);

    }).mouseLeave((node) => {
        highlightRelatedLinks(node, false);

    }).dblClick((node) => {
        node.data == "parent" ? console.log("parent peh click hua hain") : window.open(node.data);
    });

    // Remove the hero section and add the down arrow button {done for now}
    const visButton = document.getElementById('visualize')
    const heroSection = document.getElementById('hero')
    const downArrow = document.getElementById('down-arrow')
    visButton?.addEventListener('click', () => {
        renderer.run()
        heroSection?.classList.add('hidden')
        downArrow?.classList.remove('hidden')
    })
</script>